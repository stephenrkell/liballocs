# This Makefile maintains a repository of allocation site
# metadata, shadowing libraries and executables in the system,
# similar to the /usr/lib/debug hierarchy. 

# HACK! for spaces
nullstring :=
space := $(nullstring) # end

THIS_MAKEFILE := $(realpath $(lastword $(MAKEFILE_LIST)))
LIBALLOCS ?= $(realpath $(dir $(THIS_MAKEFILE))/..)
include $(LIBALLOCS)/config.mk

META_BASE ?= /usr/lib/meta
$(warning META_BASE is $(META_BASE))

DWARFTYPES ?= $(dir $(THIS_MAKEFILE))/dwarftypes
FRAMETYPES ?= $(dir $(THIS_MAKEFILE))/frametypes
ALLOCSITES ?= $(dir $(THIS_MAKEFILE))/allocsites
ALLOCSITES_BLOOM ?= $(dir $(THIS_MAKEFILE))/allocsites-bloom
ALLOCTYPES ?= $(dir $(THIS_MAKEFILE))/alloctypes
METAVECTOR ?= $(dir $(THIS_MAKEFILE))/metavector
EXTRASYMS ?= $(dir $(THIS_MAKEFILE))/extrasyms
DUMPSYSCALLS ?= $(dir $(THIS_MAKEFILE))/dumpsyscalls

LDD_FUNCS ?= $(dir $(THIS_MAKEFILE))/ldd-funcs.sh
OBJDUMPALLOCS ?= $(dir $(THIS_MAKEFILE))/objdumpallocs
MERGE_ALLOCS ?= $(dir $(THIS_MAKEFILE))/merge-allocs.sh
GATHER_SRCALLOCS ?= $(dir $(THIS_MAKEFILE))/gather-srcallocs.sh

OBJDUMPMEMACC ?= $(dir $(THIS_MAKEFILE))/objdumpmemacc
MERGE_MEMACC ?= $(dir $(THIS_MAKEFILE))/merge-allocs.sh # FIXME: change name
GATHER_SRCMEMACC ?= $(dir $(THIS_MAKEFILE))/gather-srcmemacc.sh

ifneq ($(LIBALLOCSTOOL),)
CFLAGS += -I$(LIBALLOCSTOOL)/include
else
CFLAGS += $(LIBALLOCSTOOL_CFLAGS)
endif
CFLAGS += -I$(LIBALLOCS)/include -I$(LIBRUNT)/include

META_CC ?= $(CC)
$(info META_CC is $(META_CC))
META_CFLAGS ?= $(CFLAGS)

# By default, remake everything we have already made,
# but don't make new .allocsites files.
default: $(shell find $(META_BASE) -type f -name '*.allocsites*' ! -name 'Makefile.meta' )

# Handle symlinks properly:
# for any symlink that is resolved when resolving /$*,
# ensure the analogous symlink exists under /usr/lib/meta,
# mkdir -p'ing its containing directory before doing so if it does not yet exist
# (because by construction, that directory should be a real directory not a symlink,
# otherwise we would have created the symlink earlier).
# After doing that, if $$(dirname "$@") does not exist, mkdir -p it.
# We can ignore symlinks that realpath to a regular file; we just care about directories.
define ensure_mirror_dir_for_target
$(dir $(THIS_MAKEFILE))dump-symlinks.sh /$* | while IFS="`echo -ne '\t'`" read link kind target; do \
test -h "$(META_BASE)"/"$$link" || test -d "$$(readlink -f "$(META_BASE)"/"$$link")" || { \
   test -e "$(META_BASE)$$(dirname "$$link")" || echo mkdir -p "$(META_BASE)/$$(dirname "$$link")"; \
   echo cd "$(META_BASE)$$(dirname "$$link")" \&\& ln -s `echo handling symlink of kind $$kind 1>&2; if [ "$$kind" == "absolute" ]; then echo "$(META_BASE)"; fi`"$$target" "$$(basename "$$link")" ; }; done
	test -e $$(dirname "$@") || mkdir -p $$(dirname "$@")
endef

# Remaking a .allocsites file from the analogous file 
# in the system.
prefix_exactly_one_slash = $(shell echo "$1" | sed 's|^/*\(.*\)|/\1|' )
$(META_BASE)/%.objallocs: $(call prefix_exactly_one_slash,%)
	$(call ensure_mirror_dir_for_target)
	$(OBJDUMPALLOCS) "$<" | sed "s|.*|$<\t&|" > "$@" || (rm -f "$@"; false)
$(META_BASE)/%.objmemacc: $(call prefix_exactly_one_slash,%)
	$(call ensure_mirror_dir_for_target)
	$(OBJDUMPMEMACC) "$<" | sed "s|.*|$<\t&|" > "$@" || (rm -f "$@"; false)

# We also know how to build a lib%-uniqtypes.so for each executable.
# Which allocsites files does an executable's uniqtypes depend on?
# depend = $(shell $(OBJDEPS) "$1" 2>/dev/null | cut -f1 | while read line; do readlink -f "$$line"; done )

# # Note that $1 is always '/'-prefixed here, so we don't insert another L-- here
# # allocsites_from_obj = $(patsubst %,$(META_BASE)%.allocsites,$1)
# # all_allocsites_for_obj = $(foreach f,$1 $(call depend,$1),$(call allocsites_from_obj,$(f)))

# don't build /usr/lib/meta/usr/lib/meta/anything... 
# and it's a bug if we try
$(META_BASE)$(META_BASE)/%:
	false

$(META_BASE)/%.srcallocs: $(META_BASE)/%.objallocs
	( $(GATHER_SRCALLOCS) "$<" 2>&1 1>"$@" || (rm -f "$@"; false) ) | tee "$@.rej"
	test -e "$@"

$(META_BASE)/%.allocs: $(META_BASE)/%.objallocs $(META_BASE)/%.srcallocs
	( $(MERGE_ALLOCS) $+ 2>&1 1>"$@" || (rm -f "$@"; false) ) | tee "$@.rej"
	test -e "$@"

$(META_BASE)/%.srcmemacc: $(META_BASE)/%.objmemacc
	( $(GATHER_SRCMEMACC) "$<" 2>&1 1>"$@" || (rm -f "$@"; false) ) | tee "$@.rej"
	test -e "$@"

$(META_BASE)/%.memacc: $(META_BASE)/%.objmemacc $(META_BASE)/%.srcmemacc
	( $(MERGE_MEMACC) $+ 2>&1 1>"$@" || (rm -f "$@"; false) ) | tee "$@.rej"
	test -e "$@"

METADATA_KINDS ?= roottypes dwarftypes alloctypes frametypes allocsites extrasyms metavector \
 syscalls # starts-bitmaps allocsites-bloom 
# can't use builtin .o rule in case CC is not gcc (section flags injection attack
# using "... comdat# ..." doesn't work except on gcc). (FIXME: use configure-time
# adaptation found in glibc's libc-symbols.h?)

meta_sources =
# It's not the existence of a file that we care about; it's the inclusion
# of a file in the link. But it's OK -- make let us incrementally build
# the list of inputs across a series of rules.
ifneq ($(filter dwarftypes,$(METADATA_KINDS)),)
$(info Generating dwarftypes)
meta_sources += $(META_BASE)/$(1)-roottypes.c $(META_BASE)/$(1)-dwarftypes.c
endif
ifneq ($(filter alloctypes,$(METADATA_KINDS)),)
$(info Generating alloctypes)
meta_sources += $(META_BASE)/$(1)-alloctypes.c
endif
ifneq ($(filter allocsites,$(METADATA_KINDS)),)
$(info Generating allocsites)
meta_sources += $(META_BASE)/$(1)-allocsites.c
endif
ifneq ($(filter extrasyms,$(METADATA_KINDS)),)
$(info Generating extrasyms)
meta_sources += $(META_BASE)/$(1)-extrasyms.c
endif
ifneq ($(filter metavector,$(METADATA_KINDS)),)
$(info Generating metavector)
meta_sources += $(META_BASE)/$(1)-metavector.c
endif
ifneq ($(filter allocsites-bloom,$(METADATA_KINDS)),)
$(info Generating allocsites-bloom)
meta_sources += $(META_BASE)/$(1)-allocsites-bloom.c
endif
ifneq ($(filter frametypes,$(METADATA_KINDS)),)
$(info Generating frametypes)
meta_sources += $(META_BASE)/$(1)-frametypes.c
endif
ifneq ($(filter syscalls,$(METADATA_KINDS)),)
$(info Generating syscall sites)
meta_sources += $(META_BASE)/$(1)-syscalls.c
endif

# When we build a meta .so, we now link it until the build ID.
# We *hard* link it!
# If we symlinked it, it would mean that filename at which the binary was built would
# be the only "first-class" filename. If we were to move the built binary, say during
# installation, and then re-build in the installed-from source tree, generating a new build
# ID, then the symlink would incorrectly point to the new meta-DSO with a mismatched
# build ID. Hard-linking seems like the right thing. The downside is that this will
# leak space, not only keeping alive meta-DSOs that have no corresponding DSO (this can
# already happen), but also *even* when we delete *both* /path/to/my/binary and
# /usr/lib/meta/path/to/my/binary. Probably the right thing to do is periodically
# scan /usr/lib/meta for semi-orphaned meta-DSOs (nlink==1) and figure out what to do.
# These binaries are only "semi-orphaned" because if we installed and then cleaned the
# source tree, nlink==1 is what we would expect. A good install script would also re-
# link the meta-DSO's by-path hardlink, keeping nlink==2. But even if not, we should be
# able to find a binary of this build ID on the system and then re-link it. This would
# involve scanning the whole system searching for particular build IDs, which is a bit
# gross.
define link_under_build_id
build_id=$$( . $(dir $(THIS_MAKEFILE))/debug-funcs.sh && read_build_id "$<" ); \
if [ -n "$$build_id" ]; then \
 dirname="$(META_BASE)"/.build-id/"$$( echo "$$build_id" | head -c2 )"; \
 mkdir -p "$$dirname" && \
 linkname="$$dirname"/"$$( echo "$$build_id" | tail -c+3 )"-meta.so && \
 ln -f -T "$@" "$$linkname"; \
 stat "$@"; stat "$$linkname"; \
else \
 echo "Warning: could not get build ID for $< so not linking meta-DSO" 1>&2; \
fi
endef

# for debugging, try: @echo all dependencies: $+
$(META_BASE)/%-meta.so: /% $(call meta_sources,%)
	$(META_CC) $(META_CFLAGS) -shared -Wl,--hash-style=both -o "$@" $(filter %.c,$+) && \
$(link_under_build_id)

SWAP_STDOUT_STDERR := 3>&2 2>&1 1>&3

# We have a new taxonomy of meta-information, as follows.
# uniqtypes that we always generate (void, existential...)
.PRECIOUS: $(META_BASE)/%-roottypes.c
$(META_BASE)/%-roottypes.c: $(dir $(THIS_MAKEFILE))/roottypes.c
	$(call ensure_mirror_dir_for_target)
	cp $(dir $(THIS_MAKEFILE))/roottypes.c $@
# real uniqtypes
.PRECIOUS: $(META_BASE)/%-dwarftypes.c
$(META_BASE)/%-dwarftypes.c: /%
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(DWARFTYPES) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# synthetic heap uniqtypes: depends on real uniqtypes
.PRECIOUS: $(META_BASE)/%-alloctypes.c
$(META_BASE)/%-alloctypes.c: /% $(META_BASE)/%.allocs
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(ALLOCTYPES) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# frame uniqtypes: depends on real uniqtypes
.PRECIOUS: $(META_BASE)/%-frametypes.c
$(META_BASE)/%-frametypes.c: /%
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(FRAMETYPES) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# heap allocsites: depends on synthetic heap types
.PRECIOUS: $(META_BASE)/%-allocsites.c
$(META_BASE)/%-allocsites.c: $(META_BASE)/%.allocs
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(ALLOCSITES) < $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# heap allocsites bloom filter: depends on heap allocsites
.PRECIOUS: $(META_BASE)/%-allocsites-bloom.c
$(META_BASE)/%-allocsites-bloom.c: $(META_BASE)/%.allocs
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(ALLOCSITES_BLOOM) < $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# file extrasyms: does *not* depend on anything (just generates fake syms from debug info)
.PRECIOUS: $(META_BASE)/%-extrasyms.c
$(META_BASE)/%-extrasyms.c: /%
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(EXTRASYMS) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# file sorted meta-vector: type info is optional -- we might want to use this from librunt
# -- so just emit weak references to the types? and/or use conditional compilation?
# file per-segment starts bitmaps are now included here
# file sorted meta-vector really with type info: depends on real uniqtypes
.PRECIOUS: $(META_BASE)/%-metavector.c
$(META_BASE)/%-metavector.c: /%
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(METAVECTOR) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
.PRECIOUS: $(META_BASE)/%-syscalls.c
$(META_BASE)/%-syscalls.c: /%
	$(call ensure_mirror_dir_for_target)
	errs=$$( ( $(DUMPSYSCALLS) $< $(SWAP_STDOUT_STDERR) ) 2>$@ ); \
	status=$$?; echo "$$errs" | gzip >$@.log.gz; [ $$status -eq 0 ] || (mv $@ $@.err; false)
# Given this complexity, perhaps we should
# 1. never output struct definitions in-line. always include them from a header.
#     -- the header can use #ifdef-guards to make repeated includes harmless
# 2. try to save running time / code by making multiple kinds of metadata
#     generable from a single tool invocation?
#    - e.g.  build a single program with command-line options --types --synthetic-heap --frame --heap-alloc-sites --heap-alloc-bloom --file-extrasyms --file-meta-vector --file-starts-bitmaps
#    - allow it to be $0-symlinked as tools which simply generate a single kind of meta-info
